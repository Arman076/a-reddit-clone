pipeline {
  agent any
  tools {
    jdk 'jdk17'
    nodejs 'node23'
  }
  environment {
    SCANNER_HOME = tool 'sonar-scanner'
    APP_NAME = 'a-reddit-clone'
    DOCKER_USER = 'devil678'
    DOCKER_PASS = 'docker-cred' // Docker Hub credentials (username/password stored in Jenkins)
    IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
    IMAGE_TAG = "${BUILD_NUMBER}"
    JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    EMAIL_CREDS = credentials('email-creds') // Use this credential ID with username+password
  }

  stages {
    stage("Clean Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Cloning the repo") {
      steps {
        git branch: "main", url: "https://github.com/Arman076/a-reddit-clone.git"
        echo "Cloning the code successfully"
        sh "ls -ltr"
      }
    }

    stage("SonarQube Analysis") {
      steps {
        withSonarQubeEnv('sonar-server') {
          sh '''
            ${SCANNER_HOME}/bin/sonar-scanner \
            -Dsonar.projectName=Reddit-Clone-CI \
            -Dsonar.projectKey=Reddit-Clone-CI
          '''
        }
      }
    }

    stage("Quality Gate Analysis") {
      steps {
        script {
          waitForQualityGate abortPipeline: false, credentialsId: 'Sonarqube'
        }
      }
    }

    stage("Install Dependencies") {
      steps {
        sh 'npm install'
      }
    }

    stage("Trivy File System Scan") {
      steps {
        sh "trivy fs . > trivyfs.txt"
      }
    }

    stage("Docker Build and Push Images") {
      steps {
        script {
          docker.withRegistry('', DOCKER_PASS) {
            def docker_image = docker.build("${IMAGE_NAME}")
            docker_image.push("${IMAGE_TAG}")
            docker_image.push("latest")
          }
        }
      }
    }

    stage("Install Helm") {
      steps {
        sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3'
        sh 'chmod 700 get_helm.sh'
        sh './get_helm.sh'
        sh 'helm version'
      }
    }

    stage("Trivy Image Scan") {
      steps {
        sh '''
          docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image devil678/a-reddit-clone:latest \
          --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table > trivyimage.txt
        '''
      }
    }

    stage("CleanUp Docker Artifacts") {
      steps {
        sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true"
      }
    }

    stage("Trigger CD Pipeline") {
      steps {
        sh """
          curl -v -k --user clouduser:${JENKINS_API_TOKEN} -X POST \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/x-www-form-urlencoded' \
          --data 'IMAGE_TAG=${IMAGE_TAG}' \
          'http://ec2-65-2-140-96.ap-south-1.compute.amazonaws.com:8080/job/Reddit-Clone-CD/buildWithParameters?token=gitops-token'
        """
      }
    }
  }

  post {
    always {
      emailext (
        to: "anjaraalam3597@gmail.com",
        subject: "Jenkins Build: ${currentBuild.fullDisplayName}",
        body: """<p><strong>Job:</strong> ${env.JOB_NAME}</p>
                 <p><strong>Build #:</strong> ${env.BUILD_NUMBER}</p>
                 <p><strong>Status:</strong> ${currentBuild.result ?: 'SUCCESS'}</p>
                 <p><a href="${env.BUILD_URL}">View Full Logs</a></p>""",
        attachmentsPattern: 'trivyfs.txt,trivyimage.txt',
        attachLog: true,
        mimeType: 'text/html'
      )
    }
  }
}
